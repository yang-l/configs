{
  ## bootstrap
  #  sh <(curl -L https://nixos.org/nix/install) --darwin-use-unencrypted-nix-store-volume --daemon
  #
  #  nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
  #  nix-channel --update
  #  nix-shell '<home-manager>' -A install
  # or
  #  nix-shell '<home-manager>' -A install -I home-manager=https://github.com/nix-community/home-manager/archive/master.tar.gz
  #
  #  nix --extra-experimental-features 'nix-command flakes' build '.#homeConfigurations.macbook-pro.activationPackage'
  #  ./result/activate

  #  sudo sh -c "echo $(which bash) >> /etc/shells"
  #  chsh -s $(which bash)
  # or
  #  sudo sh -c "echo $(which zsh) >> /etc/shells"
  #  chsh -s $(which zsh)

  ## update
  #  nix-channel --update
  #  nix flake lock --update-input home-manager
  #  nix flake lock --update-input nixpkgs

  ## upgrade nix
  #  nix upgrade-nix

  ## on-going
  #  home-manager build --flake .#macbook-pro
  # or
  #  home-manager switch --flake .#macbook-pro
  #
  #  ../../nix.sh
  # or
  #  ../../nix.sh switch
  #
  #  make
  # or
  #  make switch

  description = "A Home Manager flake";

  inputs = {
    # main sets
    nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # overlays
    emacs-overlay.url = "github:nix-community/emacs-overlay";
    declarative-cachix.url = "github:jonascarpay/declarative-cachix";
  };

  outputs = { self, nixpkgs, home-manager, emacs-overlay, declarative-cachix, ... }@inputs:
  let
    system = "x86_64-darwin";
    pkgs = import nixpkgs {
      inherit system;
      config = { allowUnfree = true; };
    };
  in {
    homeConfigurations = {
      macbook-pro = home-manager.lib.homeManagerConfiguration {
        inherit pkgs;

        modules = [
          {
            # 'home.nix' configurations
            home = {
              homeDirectory = "/Users/yangliu";
              username = "yangliu";

              # no default value since home-manager v22.11
              stateVersion = "22.05";

              # For Nix flake
              file.nixConf.text = ''
                experimental-features = nix-command flakes
              '';

              ## base setup
              sessionVariables = {
                _BASE_CONFIG_FOLDER_PATH = "${__FULL_BASE_FOLDER_PATH}";
                XDG_CONFIG_HOME = "$HOME/.config";
              };
            };

            # Let Home Manager install and manage itself.
            programs.home-manager.enable = true;

            # setup cachix
            caches.cachix = [{
              name = "nix-community";
              sha256 = "1955r436fs102ny80wfzy99d4253bh2i1vv1x4d4sh0zx2ssmhrk";
            }];
          }

          # cachix / nix-community
          declarative-cachix.homeManagerModules.declarative-cachix-experimental

          {
            # overlays
            nixpkgs.overlays = [ (import emacs-overlay) ];
          }
          # note - need to run the command below
          # echo "trusted-users = root yangliu" | sudo tee -a /etc/nix/nix.conf && sudo pkill nix-daemon

          ./modules/asdf.nix
          ./modules/aws.nix
          ./modules/awsvault.nix
          ./modules/bat.nix
          ./modules/bash.nix
          ./modules/cleanup.nix
          ./modules/editorconfig
          ./modules/git.nix
          ./modules/iterm2.nix
          ./modules/local-bin.nix
          ./modules/misc-dockerfiles.nix
          ./modules/packages.nix
          ./modules/ripgrep.nix
          ./modules/ruby.nix
          ./modules/shell.nix
          ./modules/terminal-truecolor.nix
          ./modules/tmux.nix
          ./modules/zsh.nix
        ];
      };
    };
  };
}
