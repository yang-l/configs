{
  #  /usr/sbin/softwareupdate --install-rosetta --agree-to-license
  ## bootstrap
  #  sh <(curl -L https://nixos.org/nix/install)
  #
  # nix-channel --add https://nixos.org/channels/nixpkgs-unstable
  #
  # # nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
  # # nix-channel --update
  # # nix-shell '<home-manager>' -A install
  # or
  #  nix-shell '<home-manager>' -A install -I home-manager=https://github.com/nix-community/home-manager/archive/master.tar.gz
  #
  #  nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs-unstable
  #
  # # nix --extra-experimental-features 'nix-command flakes' build '.#homeConfigurations.macbook-pro.activationPackage'
  # # ./result/activate
  # or
  #  make / make switch

  #  sudo sh -c "echo $(which bash) >> /etc/shells"
  #  chsh -s $(which bash)
  # or
  #  sudo sh -c "echo $(which zsh) >> /etc/shells"
  #  chsh -s $(which zsh)

  ## update
  #  nix-channel --update
  #  nix flake lock --update-input home-manager
  #  nix flake lock --update-input nixpkgs

  #  nix flake update home-manager --extra-experimental-features "nix-command flakes"
  #  nix flake update nixpkgs --extra-experimental-features "nix-command flakes"

  ## upgrade nix
  #  nix upgrade-nix

  ## on-going
  #  home-manager build --flake .#macbook-pro
  # or
  #  home-manager switch --flake .#macbook-pro
  #
  #  ../../nix.sh
  # or
  #  ../../nix.sh switch
  #
  #  make
  # or
  #  make switch

  description = "A Home Manager flake";

  inputs = {
    # main sets
    nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, home-manager, ... }@inputs:
  let
    system = "aarch64-darwin";
    pkgs = import nixpkgs {
      inherit system;
      config = { allowUnfree = true; };
    };
  in {
    homeConfigurations = {
      macbook-pro_m2 = home-manager.lib.homeManagerConfiguration {
        inherit pkgs;

        modules = [
          {
            # 'home.nix' configurations
            home = {
              homeDirectory = "/Users/yangliu";
              username = "yangliu";

              # no default value since home-manager v22.11
              # https://github.com/nix-community/home-manager/tree/master/docs/release-notes
              stateVersion = "25.11";

              # For Nix flake
              file.nixConf.text = ''
                auto-optimise-store = true
                experimental-features = nix-command flakes
                extra-platforms = x86_64-darwin aarch64-darwin
              '';

              ## base setup
              sessionVariables = {
                _BASE_CONFIG_FOLDER_PATH = "${__FULL_BASE_FOLDER_PATH}";
                XDG_CONFIG_HOME = "$HOME/.config";
              };
            };

            # Let Home Manager install and manage itself.
            programs.home-manager.enable = true;
          }

          # https://github.com/nix-community/home-manager/issues/2033#issuecomment-1848326144
          {
            news.display = "silent";
            news.json = pkgs.lib.mkForce { };
            news.entries = pkgs.lib.mkForce [ ];
          }

          # ./modules/asdf.nix
          ./modules/aws.nix
          ./modules/awsvault.nix
          ./modules/bat.nix
          # ./modules/bash.nix
          ./modules/cleanup.nix
          ./modules/editorconfig.nix
          ./modules/git.nix
          ./modules/jq.nix
          ./modules/iterm2.nix
          ./modules/local-bin.nix
          ./modules/misc-dockerfiles.nix
          ./modules/mise.nix
          ./modules/packages.nix
          ./modules/ripgrep.nix
          ./modules/ruby.nix
          ./modules/shell.nix
          ./modules/ssh.nix
          ./modules/terminal-truecolor.nix
          ./modules/tmux.nix
          ./modules/zsh.nix
        ];
      };
    };
  };
}
